import grafos
import analises
import os

def to_txt(file_name, content):
    os.makedirs("resultados", exist_ok=True)
    caminho = os.path.join("resultados", file_name)
    with open(caminho, "w", encoding="utf-8") as f:
        f.write(content)

# l√™ os dados do csv
cast_list, director_list = grafos.read_csv('netflix_amazon_disney_titles.csv')
    
# constr√≥i o grafo direcionado (ator -> diretor)
grafo_direcionado = grafos.directed_graph(cast_list, director_list)
nodes_d, edges_d = grafo_direcionado.get_numbers()
    
# constr√≥i o grafo n√£o direcionado (ator <-> ator)
grafo_nao_direcionado = grafos.undirected_graph(cast_list)
nodes_u, edges_u = grafo_nao_direcionado.get_numbers()

# RELAT√ìRIO COMPLETO
relatorio = "÷¥ ‡£™ñ§ê RELAT√ìRIO COMPLETO - AN√ÅLISE DE REDES COMPLEXAS ÷¥ ‡£™ñ§ê\n\n"

# Informa√ß√µes b√°sicas dos grafos
relatorio += "INFORMA√á√ïES B√ÅSICAS DOS GRAFOS\n"
relatorio += "=" * 50 + "\n"
relatorio += f"Grafo Direcionado (Ator->Diretor): {nodes_d} v√©rtices, {edges_d} arestas\n"
relatorio += f"Grafo N√£o Direcionado (Ator<->Ator): {nodes_u} v√©rtices, {edges_u} arestas\n\n"

# ============================================================================
# AN√ÅLISE ESTRUTURAL
# ============================================================================

relatorio += "PARTE 1: AN√ÅLISE ESTRUTURAL DOS GRAFOS\n"
relatorio += "=" * 60 + "\n\n"

# 1) An√°lise da distribui√ß√£o de graus
print("Analisando distribui√ß√£o de graus do grafo direcionado...")
relatorio += "1) DISTRIBUI√á√ÉO DE GRAUS\n"
relatorio += "-" * 40 + "\n\n"

relatorio += analises.analyze_degree_distribution(grafo_direcionado, "GRAFO DIRECIONADO (ATOR->DIRETOR)", sample_size=100)

print("Analisando distribui√ß√£o de graus do grafo n√£o direcionado...")
relatorio += analises.analyze_degree_distribution(grafo_nao_direcionado, "GRAFO N√ÉO DIRECIONADO (ATOR<->ATOR)", sample_size=100)

# 2) An√°lise das componentes
print("Analisando distribui√ß√£o de componentes...")
relatorio += "2) DISTRIBUI√á√ÉO DE COMPONENTES\n"
relatorio += "-" * 40 + "\n\n"

relatorio += analises.analyze_component_distribution(grafo_nao_direcionado, grafo_direcionado, sample_size=100)

# ============================================================================
# AN√ÅLISE DE CENTRALIDADE
# ============================================================================

relatorio += "PARTE 2: AN√ÅLISE DE CENTRALIDADE\n"
relatorio += "=" * 60 + "\n\n"

# 3) Top 10 diretores por centralidade de grau
print("Calculando centralidade de grau para diretores...")
relatorio += "3) TOP 10 DIRETORES MAIS INFLUENTES (Centralidade de Grau)\n"
relatorio += "-" * 60 + "\n"
relatorio += analises.get_top_directors_string(grafo_direcionado, 10)

# 4) Top 10 diretores por centralidade de intermedia√ß√£o
print("Calculando centralidade de intermedia√ß√£o para diretores...")
relatorio += "4) TOP 10 DIRETORES MAIS INFLUENTES (Centralidade de Intermedia√ß√£o)\n"
relatorio += "-" * 60 + "\n"
relatorio += analises.get_top_directors_betweenness_string_fast(grafo_direcionado, 10, sample_size=50)

# 5) Top 10 diretores por centralidade de proximidade
print("Calculando centralidade de proximidade para diretores...")
relatorio += "5) TOP 10 DIRETORES MAIS INFLUENTES (Centralidade de Proximidade)\n"
relatorio += "-" * 60 + "\n"
relatorio += analises.get_top_directors_closeness_string(grafo_direcionado, 10, sample_size=50)

# 6) Top 10 atores por centralidade de grau
print("Calculando centralidade de grau para atores...")
relatorio += "6) TOP 10 ATORES/ATRIZES MAIS INFLUENTES (Centralidade de Grau)\n"
relatorio += "-" * 60 + "\n"
relatorio += analises.get_top_actors_degree_string(grafo_nao_direcionado, 10)

# 7) Top 10 atores por centralidade de intermedia√ß√£o
print("Calculando centralidade de intermedia√ß√£o para atores...")
relatorio += "7) TOP 10 ATORES/ATRIZES MAIS INFLUENTES (Centralidade de Intermedia√ß√£o)\n"
relatorio += "-" * 60 + "\n"
relatorio += analises.fast_betweenness_actors(grafo_nao_direcionado, 10, sample_size=50)

# 8) Top 10 atores por centralidade de proximidade
print("Calculando centralidade de proximidade para atores...")
relatorio += "8) TOP 10 ATORES/ATRIZES MAIS INFLUENTES (Centralidade de Proximidade)\n"
relatorio += "-" * 60 + "\n"
relatorio += analises.get_top_actors_closeness_string(grafo_nao_direcionado, 10, sample_size=50)

# ============================================================================
# EXPLICA√á√ïES E INTERPRETA√á√ïES
# ============================================================================

relatorio += "PARTE 3: EXPLICA√á√ïES E INTERPRETA√á√ïES\n"
relatorio += "=" * 60 + "\n\n"

# Explica√ß√£o das m√©tricas de centralidade
relatorio += "EXPLICA√á√ÉO DAS M√âTRICAS DE CENTRALIDADE\n"
relatorio += "-" * 40 + "\n\n"

relatorio += "CENTRALIDADE DE GRAU:\n"
relatorio += "- Mede quantas conex√µes diretas um n√≥ tem.\n"
relatorio += "- Para diretores: quantos atores trabalharam com ele.\n"
relatorio += "- Para atores: quantos outros atores trabalharam com ele.\n\n"

relatorio += "CENTRALIDADE DE INTERMEDIA√á√ÉO:\n"
relatorio += "- Mede o qu√£o importante um n√≥ √© como 'ponte' entre outros n√≥s.\n"
relatorio += "- N√≥s com alta centralidade controlam o fluxo de informa√ß√£o/influ√™ncia.\n"
relatorio += "- Para diretores: conectam diferentes grupos de atores.\n"
relatorio += "- Para atores: conectam diferentes comunidades de atores.\n\n"

relatorio += "CENTRALIDADE DE PROXIMIDADE:\n"
relatorio += "- Mede qu√£o pr√≥ximo um n√≥ est√° de todos os outros n√≥s.\n"
relatorio += "- N√≥s com alta centralidade podem influenciar rapidamente toda a rede.\n"
relatorio += "- Para diretores: podem alcan√ßar muitos atores rapidamente.\n"
relatorio += "- Para atores: podem influenciar toda a comunidade rapidamente.\n\n"

# Explica√ß√£o das caracter√≠sticas de rede complexa
relatorio += "CARACTER√çSTICAS DE REDE COMPLEXA\n"
relatorio += "-" * 40 + "\n\n"

relatorio += "‚úì Distribui√ß√£o de Graus:\n"
relatorio += "  - An√°lise da heterogeneidade dos graus\n"
relatorio += "  - Identifica√ß√£o de hubs (n√≥s com grau muito alto)\n"
relatorio += "  - Verifica√ß√£o de caracter√≠sticas scale-free\n\n"

relatorio += "‚úì Componentes:\n"
relatorio += "  - Presen√ßa de componente gigante\n"
relatorio += "  - Fragmenta√ß√£o da rede\n"
relatorio += "  - Isolamento de n√≥s\n\n"

relatorio += "‚úì Interpreta√ß√£o:\n"
relatorio += "  - Redes scale-free t√™m alta heterogeneidade (CV > 1.0)\n"
relatorio += "  - Componente gigante indica alta conectividade\n"
relatorio += "  - Hubs s√£o n√≥s com grau muito superior √† m√©dia\n\n"

relatorio += "‚úì Contexto da Ind√∫stria do Entretenimento:\n"
relatorio += "  - Hubs representam atores/diretores muito ativos\n"
relatorio += "  - Componente gigante mostra a conectividade da ind√∫stria\n"
relatorio += "  - Centralidade indica influ√™ncia e acesso a oportunidades\n"

to_txt("relatorio_completo.txt", relatorio)
print("Relat√≥rio completo gerado com sucesso em 'resultados/relatorio_completo.txt'.")